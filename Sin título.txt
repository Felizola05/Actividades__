
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


class Vehiculo {
    private String placa;
    private String marca;
    private String modelo;
    private LocalDateTime horaEntrada;

    public Vehiculo(String placa, String marca, String modelo) {
        this.placa = placa;
        this.marca = marca;
        this.modelo = modelo;
        this.horaEntrada = LocalDateTime.now();
    }

    public String getPlaca() {
        return placa;
    }

    public void setPlaca(String placa) {
        this.placa = placa;
    }

    public String getMarca() {
        return marca;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }

    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public LocalDateTime getHoraEntrada() {
        return horaEntrada;
    }

    public void setHoraEntrada(LocalDateTime horaEntrada) {
        this.horaEntrada = horaEntrada;
    }
}


class Automovil extends Vehiculo {
    private String tipoCombustible;

    public Automovil(String placa, String marca, String modelo, String tipoCombustible) {
        super(placa, marca, modelo);
        this.tipoCombustible = tipoCombustible;
    }

    public String getTipoCombustible() {
        return tipoCombustible;
    }

    public void setTipoCombustible(String tipoCombustible) {
        this.tipoCombustible = tipoCombustible;
    }
}


class Motocicleta extends Vehiculo {
    private int cilindraje;

    public Motocicleta(String placa, String marca, String modelo, int cilindraje) {
        super(placa, marca, modelo);
        this.cilindraje = cilindraje;
    }

    public int getCilindraje() {
        return cilindraje;
    }

    public void setCilindraje(int cilindraje) {
        this.cilindraje = cilindraje;
    }
}


class Camion extends Vehiculo {
    private double capacidadCarga;

    public Camion(String placa, String marca, String modelo, double capacidadCarga) {
        super(placa, marca, modelo);
        this.capacidadCarga = capacidadCarga;
    }

    public double getCapacidadCarga() {
        return capacidadCarga;
    }

    public void setCapacidadCarga(double capacidadCarga) {
        this.capacidadCarga = capacidadCarga;
    }
}


class Parqueadero {
    private List<Vehiculo> vehiculos;

    public Parqueadero() {
        this.vehiculos = new ArrayList<>();
    }

    public void registrarEntrada(Vehiculo vehiculo) {
        vehiculos.add(vehiculo);
    }

    public double registrarSalida(String placa) {
        Vehiculo vehiculo = buscarVehiculo(placa);
        if (vehiculo != null) {
            double costo = calcularCosto(vehiculo);
            vehiculos.remove(vehiculo);
            return costo;
        } else {
            return -1; 
        }
    }

    public List<Vehiculo> consultarEstado() {
        return vehiculos;
    }

    private Vehiculo buscarVehiculo(String placa) {
        for (Vehiculo vehiculo : vehiculos) {
            if (vehiculo.getPlaca().equals(placa)) {
                return vehiculo;
            }
        }
        return null;
    }

    private double calcularCosto(Vehiculo vehiculo) {
        double costo = 0;
        long tiempoEstadia = ChronoUnit.MINUTES.between(vehiculo.getHoraEntrada(), LocalDateTime.now());
        if (vehiculo instanceof Automovil) {
            costo = (tiempoEstadia / 60) * 1000; 
        } else if (vehiculo instanceof Motocicleta) {
            costo = (tiempoEstadia / 60) * 500; 
        } else if (vehiculo instanceof Camion) {
            costo = (tiempoEstadia / 60) * 2000;
        }
        return costo;
    }


    public class Main {
    public static void main(String[] args) {
        Parqueadero parqueadero = new Parqueadero();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("1. Ingresar vehículo");
            System.out.println("2. Registrar salida de vehículo");
            System.out.println("3. Consultar estado del parqueadero");
            System.out.println("4. Salir");
            System.out.print("Ingrese su opción: ");
            int opcion = scanner.nextInt();

            switch (opcion) {
                case 1:
                    System.out.print("Ingrese la placa del vehículo: ");
                    String placa = scanner.next();
                    System.out.print("Ingrese la marca del vehículo: ");
                    String marca = scanner.next();
                    System.out.print("Ingrese el modelo del vehículo: ");
                    String modelo = scanner.next();
                    System.out.print("Ingrese el tipo de vehículo (1: Automóvil, 2: Motocicleta, 3: Camión): ");
                    int tipoVehiculo = scanner.nextInt();

                    Vehiculo vehiculo = null;
                    if (tipoVehiculo == 1) {
                        System.out.print("Ingrese el tipo de combustible: ");
                        String tipoCombustible = scanner.next();
                        vehiculo = new Automovil(placa, marca, modelo, tipoCombustible);
                    } else if (tipoVehiculo == 2) {
                        System.out.print("Ingrese el cilindraje: ");
                        int cilindraje = scanner.nextInt();
                        vehiculo = new Motocicleta(placa, marca, modelo, cilindraje);
                    } else if (tipoVehiculo == 3) {
                        System.out.print("Ingrese la capacidad de carga: ");
                        double capacidadCarga = scanner.nextDouble();
                        vehiculo = new Camion(placa, marca, modelo, capacidadCarga);
                    }

                    parqueadero.registrarEntrada(vehiculo);
                    break;
                case 2:
                    System.out.print("Ingrese la placa del vehículo: ");
                    placa = scanner.next();
                    double costo = parqueadero.registrarSalida(placa);
                    if (costo != -1) {
                        System.out.println("El costo de la estadía es: $" + costo);
                    } else {
                        System.out.println("Vehículo no encontrado");
                    }
                    break;
                case 3:
                    List<Vehiculo> vehiculos = parqueadero.consultarEstado();
                    for (Vehiculo v : vehiculos) {
                        System.out.println(v.getPlaca() + " - " + v.getMarca() + " - " + v.getModelo());
                    }
                    break;
                case 4:
                    System.out.println("Gracias por utilizar el sistema");
                    return;
                default:
                    System.out.println("Opción inválida");
               scanner.close();
            }
        }
    }
    }
}
   
